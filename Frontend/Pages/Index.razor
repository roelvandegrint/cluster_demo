@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Frontend.Data
@using Frontend.Models
@inject StaffingService staffingService
@inject ILogger<Index> logger
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<h1>Hello!</h1>

@if (employees is null)
{
    <p>Loading...</p>
}
else
{
    <p>Our cluster currently consists of @employees.Count() people.</p>

    @if (!employees.Any())
    {
        <h2>There's no one here yet</h2>
    }
    else
    {
        <h2>The most recent new-joiners are:</h2>

        <div class="row">
            @foreach (var employee in employees.Take(3))
            {
                <div class="col-md-4">
                    <EmployeeCard Employee="@employee" OnClickCallback="@DeleteEmployee"></EmployeeCard>
                </div>
            }
        </div>
    }
}

<CreateEmployee></CreateEmployee>

@if (newEmployee is not null)
{
    <p>Someone joined the company!</p>
    <EmployeeCard Employee="@newEmployee"></EmployeeCard>
}

@code {
    private HubConnection? hubConnection;
    private IDisposable? listener;
    private List<Employee> employees = new();
    private Employee? newEmployee;

    private async Task DeleteEmployee(string id)
    {
        logger.LogInformation("Deleting employee");
        await staffingService.DeleteEmployeeAsync(id);
        var newEmployees = employees!.Where(e => e.Id != id);
        employees = newEmployees!.OrderByDescending(e => e.JoinedOn).ToList();
        logger.LogInformation("Employee deleted");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await SetupSignalRAsync();

        try
        {
            var employees = await staffingService.GetAllEmployeesAsync();
            this.employees = employees.OrderByDescending(e => e.JoinedOn).ToList();
        }
        catch
        {
            logger.LogError("Getting staff didn't work");
            employees = new List<Employee>();
        }
    }

    private async Task SetupSignalRAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationshub"))
        .Build();

        listener = hubConnection.On<Employee>("EmployeeJoined", employee =>
        {
            logger.LogInformation($"{employee.FirstName} {employee.LastName} joined!");
            newEmployee = employee;
            if (!employees!.Any(e => e.Id == employee.Id))
            {
                employees!.Add(employee);
                employees = employees.OrderByDescending(e => e.JoinedOn).ToList();
            }
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Connecting to the SignalR Hub failed");
        }
    }

    public async ValueTask DisposeAsync()
    {
        logger.LogInformation("Dispose called");
        if (listener is not null)
        {
            logger.LogInformation("Disposing of listener");
            listener.Dispose();
        }

        if (hubConnection is not null)
        {
            logger.LogInformation("Disposing of hubconnection");
            await hubConnection.StopAsync();
        }
    }
}